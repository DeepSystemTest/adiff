{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}

module Language.C.Analysis.AstAnalysis2 where

import           Language.C.Analysis.ConstEval
import           Language.C.Analysis.DeclAnalysis
import           Language.C.Analysis.DefTable     (defineLabel, globalDefs,
                                                   inFileScope, insertType,
                                                   lookupLabel, lookupType)
import           Language.C.Analysis.SemError
import           Language.C.Analysis.SemRep
import           Language.C.Analysis.TravMonad
import           Language.C.Analysis.TypeCheck
import           Language.C.Analysis.TypeUtils

import           Language.C.Data
import           Language.C.Pretty
import           Language.C.Syntax.AST
import           Language.C.Syntax.Constants
import           Language.C.Syntax.Ops
import           Language.C.Syntax.Utils
import           Text.PrettyPrint.HughesPJ


import           Control.Monad                    hiding (mapM, mapM_)
import           Data.Foldable                    (mapM_)
import qualified Data.Map                         as Map
import           Data.Maybe
import           Data.Traversable                 (mapM)
import           Prelude                          hiding (mapM, mapM_, reverse)

-- After the analysis (semantic phase) we want to store additional information:
data SemPhase

type instance AnnTranslationUnit SemPhase = (NodeInfo, GlobalDecls)
type instance AnnFunctionDef SemPhase     = NodeInfo
type instance AnnAsmExt SemPhase          = NodeInfo
type instance AnnStringLiteral SemPhase   = NodeInfo
type instance AnnAsmExt SemPhase          = NodeInfo
type instance AnnFunctionDef SemPhase     = NodeInfo
type instance AnnExpression SemPhase      = (NodeInfo, Type)
type instance AnnStatement SemPhase       = (NodeInfo, Type)

analyseAST :: (MonadTrav m) => CTranslationUnit NodeInfo -> m (CTranslationUnit SemPhase)
analyseAST (CTranslUnit decls _file_node) = do
    decls' <- mapM analyseExt decls
    -- check we are in global scope afterwards
    getDefTable >>= \dt -> unless (inFileScope dt) $
        error "Internal Error: Not in filescope after analysis"
    gld <- globalDefs <$> getDefTable
    return $ CTranslUnit decls' (_file_node, gld)


analyseExt :: (MonadTrav m) => CExternalDeclaration NodeInfo -> m (CExternalDeclaration SemPhase)
analyseExt (CAsmExt asm n) = do
  handleAsmBlock asm
  return $ CAsmExt (analyseStringLiteral asm) n

analyseExt (CFDefExt fundef) = CFDefExt <$> analyseFunDef fundef
analyseExt (CDeclExt decl ) = CDeclExt <$> analyseDecl decl


myAnalyseVarDecl :: (MonadTrav m) => [CDeclSpec] -> CDeclr -> [CDecl] -> NodeInfo -> m VarDecl
myAnalyseVarDecl declspecs declr oldstyle_decls node_info = do
    var_decl_info <- analyseVarDecl' True declspecs declr oldstyle_decls Nothing
    let (VarDeclInfo name fun_spec storage_spec attrs ty _declr_node) = var_decl_info
    when (isNoName name) $ astError node_info "NoName in analyseFunDef"
    let ident = identOfVarName name
    -- improve incomplete type
    ty' <- improveFunDefType ty
    -- compute storage
    fun_storage <- computeFunDefStorage ident storage_spec
    let var_decl = VarDecl name (DeclAttrs fun_spec fun_storage attrs) ty'
    return var_decl
    where
    improveFunDefType (FunctionType (FunTypeIncomplete return_ty) attrs) =
      return $ FunctionType (FunType return_ty [] False) attrs
    improveFunDefType ty = return ty


analyseFunDef :: (MonadTrav m) => CFunctionDef NodeInfo -> m (CFunctionDef SemPhase)
analyseFunDef (CFunDef declspecs declr oldstyle_decls stmt node_info) = do
    -- analyse the declarator
    var_decl <- myAnalyseVarDecl declspecs declr oldstyle_decls node_info
    -- callback for declaration
    handleVarDecl False (Decl var_decl node_info)
    -- process body
    -- callback for definition
    -- handleFunDef ident (FunDef var_decl stmt' node_info) -- TODO: Change callback definitions
    declspecs' <- analyseDeclSpecs declspecs
    declr' <- analyseDeclarator declr
    oldstyle_decls <- analyseOldstyleDecls oldstyle_decls
    stmt' <- analyseFunctionBody node_info var_decl stmt
    return $ CFunDef declspecs' declr' oldstyle_decls stmt' node_info

analyseDeclSpecs :: (MonadTrav m) => [CDeclarationSpecifier NodeInfo]-> m [CDeclarationSpecifier SemPhase]
analyseDeclSpecs = undefined

analyseDeclarator :: (MonadTrav m)  => CDeclarator NodeInfo -> m (CDeclarator SemPhase)
analyseDeclarator = undefined

analyseOldstyleDecls :: (MonadTrav m) => [CDeclaration NodeInfo]-> m [CDeclaration SemPhase]
analyseOldstyleDecls = undefined

analyseFunctionBody :: (MonadTrav m) => NodeInfo -> VarDecl -> CStatement NodeInfo -> m (CStatement SemPhase)
analyseFunctionBody node_info decl s@(CCompound localLabels items node_info2) =
  do enterFunctionScope
     mapM_ (withDefTable . defineLabel) (localLabels ++ getLabels s)
     defineParams node_info decl
     -- record parameters
     items' <- mapM (tBlockItem [FunCtx decl]) items
     leaveFunctionScope
     return $ CCompound localLabels items' node_info2

analyseFunctionBody _ _ s = astError (nodeInfo s) "Function body is no compound statement"



analyseDecl = error "decl niy"



analyseStringLiteral :: CStringLiteral NodeInfo -> CStringLiteral SemPhase
analyseStringLiteral (CStrLit cStr ni) = CStrLit cStr ni

--------------------------------------------------------------------------------
-- Down here are functions I just copied over
--------------------------------------------------------------------------------

computeFunDefStorage :: (MonadTrav m) => Ident -> StorageSpec -> m Storage
computeFunDefStorage _ (StaticSpec _)  = return$ FunLinkage InternalLinkage
computeFunDefStorage ident other_spec  = do
  obj_opt <- lookupObject ident
  let defaultSpec = FunLinkage ExternalLinkage
  case other_spec of
    NoStorageSpec  -> return$ maybe defaultSpec declStorage obj_opt
    (ExternSpec False) -> return$ maybe defaultSpec declStorage obj_opt
    bad_spec -> throwTravError $ badSpecifierError (nodeInfo ident)
                  $ "unexpected function storage specifier (only static or extern is allowed)" ++ show bad_spec

defineParams :: MonadTrav m => NodeInfo -> VarDecl -> m ()
defineParams ni decl =
  case getParams (declType decl) of
    Nothing -> astError ni
               "expecting complete function type in function definition"
    Just params -> mapM_ handleParamDecl params

-- | Typecheck a block item. When statement expressions are blocks,
--   they have the type of their last expression statement, so this
--   needs to return a type.
tBlockItem :: MonadTrav m => [StmtCtx] -> CCompoundBlockItem NodeInfo -> m (CCompoundBlockItem SemPhase)
tBlockItem ctx (CBlockStmt stmt)     = do
  (stmt, t) <- tStmt ctx stmt
  return (CBlockStmt stmt, t)
tBlockItem _ (CBlockDecl d)     = do
  analyseDecl True d >> return voidType
  undefined
-- TODO: fixup analyseFunDef to handle nested functions
tBlockItem _ (CNestedFunDef fd) = do
  analyseFunDef fd >> return voidType
  undefined

-- TODO: This belongs somewhere else probably
class HasType a where
  getType :: a -> Type

instance HasType (CStatement SemPhase)

-- | Typecheck a statement, given a statement context. The type of a
--   statement is usually @void@, but expression statements and blocks
--   can sometimes have other types.
tStmt :: MonadTrav m => [StmtCtx] -> CStatement NodeInfo -> m (CStatement SemPhase)
tStmt c (CLabel _ s _ _)         = tStmt c s
tStmt c (CExpr e _)              =
  maybe (return voidType) (tExpr c RValue) e
tStmt c (CCompound ls body _)    =
  do enterBlockScope
     mapM_ (withDefTable . defineLabel) ls
     t <- foldM (const $ tBlockItem c) voidType body
     leaveBlockScope
     return t
tStmt c (CIf e sthen selse _)    =
  checkGuard c e >> tStmt c sthen
                 >> maybe (return ()) (voidM . tStmt c) selse
                 >> return voidType
tStmt c (CSwitch e s ni)         =
  tExpr c RValue e >>= checkIntegral' ni >>
  tStmt (SwitchCtx : c) s
tStmt c (CWhile e s _ _)         =
  checkGuard c e >> tStmt (LoopCtx : c) s
tStmt _ (CGoto l ni)             =
  do dt <- getDefTable
     case lookupLabel l dt of
       Just _ -> return voidType
       Nothing -> typeError ni $ "undefined label in goto: " ++ identToString l
tStmt c (CCont ni)               =
  do unless (inLoop c) $ astError ni "continue statement outside of loop"
     return voidType
tStmt c (CBreak ni)              =
  do unless (inLoop c || inSwitch c) $
            astError ni "break statement outside of loop or switch statement"
     return voidType
tStmt c (CReturn (Just e) ni)    =
  do t <- tExpr c RValue e
     rt <- case enclosingFunctionType c of
             Just (FunctionType (FunType rt _ _) _) -> return rt
             Just (FunctionType (FunTypeIncomplete rt) _) -> return rt
             Just ft -> astError ni $ "bad function type: " ++ pType ft
             Nothing -> astError ni "return statement outside function"
     case (rt, t) of
       -- apparently it's ok to return void from a void function?
       (DirectType TyVoid _ _, DirectType TyVoid _ _) -> return ()
       _ -> assignCompatible' ni CAssignOp rt t
     return voidType
tStmt _ (CReturn Nothing _)      = return voidType
-- XXX: anything to do for assembly?
tStmt _ (CAsm _ _)               = return voidType
tStmt c (CCase e s ni)           =
  do unless (inSwitch c) $
            astError ni "case statement outside of switch statement"
     tExpr c RValue e >>= checkIntegral' ni
     tStmt c s
tStmt c (CCases e1 e2 s ni)      =
  do unless (inSwitch c) $
            astError ni "case statement outside of switch statement"
     tExpr c RValue e1 >>= checkIntegral' ni
     tExpr c RValue e2 >>= checkIntegral' ni
     tStmt c s
tStmt c (CDefault s ni)          =
  do unless (inSwitch c) $
            astError ni "default statement outside of switch statement"
     tStmt c s
tStmt c (CFor i g inc s _)       =
  do enterBlockScope
     either (maybe (return ()) checkExpr) (analyseDecl True) i
     maybe (return ()) (checkGuard c) g
     maybe (return ()) checkExpr inc
     _ <- tStmt (LoopCtx : c) s
     leaveBlockScope
     return voidType
  where checkExpr e = voidM$ tExpr c RValue e
tStmt c (CGotoPtr e ni)          =
  do t <- tExpr c RValue e
     case t of
       (PtrType _ _ _) -> return voidType
       _               -> typeError ni "can't goto non-pointer"

data StmtCtx = FunCtx VarDecl
             | LoopCtx
             | SwitchCtx

-- (private) Get parameters of a function type
getParams :: Type -> Maybe [ParamDecl]
getParams (FunctionType (FunType _ params _) _) = Just params
getParams _                                     = Nothing
